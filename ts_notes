INTRO
======
- ts has all the features of js
- but with added benefits like stactic typing
- strongly typed,
- compiled into js b4 its run on browser


SET UP
======
1. Install node.js and npm
2. Install typescript globally
  npm install -g typescript

3. Check if installed correctly
  tsc --version

TS BASICS
=========

1. Variables and Types
======================
  string: represents text
    let name: string = "John";

  number: represents numeric values
    let age: number = 30;

  boolean: represents true or false
    let isStudent: boolean = true;


2. Arrays
=========
- ts allows you to define the type of elements in an array
  let numbers: number[] = [1, 2, 3];
  let names: string[] = ["John", "Jane"];

3. Tuples
=========
- ts allows you to define the type of elements in an tuple:
  let person: [string, number] = ["John", 30];

4. Objects
==========
- ts allows you to define the type of properties in an object:
  let person: { name: string; age: number } = {
    name: "John",
    age: 30,
  };

5. Functions
============
- ts allows you to define the type of parameters and return value of a function:
  function add(a: number, b: number): number {
    return a + b;
  }

6. Type Inference
=================
- ts can infer the type of a variable based on its initial value:
  let name = "John";
  let age = 30;


COMPILING TYPESCRIPT
===================
- to compile ts file to js file
  tsc filename.ts

  Using tsconfig.json
  ===================
  - used if you want to compile multiple files
  - to create tsconfig.json file
    tsc --init





INTERFACES
==========
- defines the structure of an object
- tells ts waht properties and types an object should have
- Think of it like a contract - it says what should be in an object
- use keyword: interface

  SYNTAX
  ======
  interface Person {
    name: string;
    age: number;
  }
    
  const user: Person = {
    name: "Alice",
    age: 24
  };


  Optional Properties
  ==================
  - mark a property as optional using: ?
    interface Person {
      name: string;
      age?: number;
    }
    
    const user: Person = {
      name: "Alice",
    };

  Readonly Properties
  ==================
  - mark a property as readonly using: readonly
    interface Person {
      readonly name: string;
    }
    
    const user: Person = {
      name: "Alice",
    }; // will throw error because name is readonly: cannot assign to 'name' because it is a read-only property


CLASSES
========
-  defines the structure and behavior of an object
- use keyword: class

  SYNTAX
  ======
  class Person {
    name: string;
    age: number;

    constructor(name: string, age: number) {
      this.name = name;
      this.age = age;
    }

    greet() {
      console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
    }
  }

  const user = new Person("Alice", 24);
  user.greet(); 

Acess Modifiers
===============
- public: accessible from anywhere
- private: accessible only inside the class
- protected: accessible only inside the class and its subclasses  

  example:
  class Person {
    private name: string;
    protected age: number;      

    constructor(name: string, age: number) {
      this.name = name;
      this.age = age;
    }
  }

  const user = new Person("Alice", 24);
  console.log(user.name); // will throw error because name is private


inheritance
==========
- inheritance allows you to create a new class (subclass) that is a copy of an existing class (superclass)
- subclass can have its own properties and methods, and can override or extend the properties and methods of the superclass
- use keyword: extends


  example:  
  class Person {    
    name: string;
    age: number;

    constructor(name: string, age: number) {
      this.name = name;
      this.age = age;
    }
  }

  class Student extends Person {
    studentId: number;

    constructor(name: string, age: number, studentId: number) {
      super(name, age);
      this.studentId = studentId;
    }
  }


